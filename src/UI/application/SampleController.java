package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseButton;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import DataObjects.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableColumn;

public class SampleController {
	@FXML
	private MenuItem closeMenu;
	@FXML
	private Button signUp;
	@FXML
	private MenuItem rating;
	@FXML
	private MenuItem date;
	@FXML
	private TextField searchBar;
	@FXML
	private Button searchBut;
	@FXML
	private TableView table;
	@FXML
	private TableColumn appCol;
	@FXML
	private TableColumn comCol;
	@FXML
	private TableColumn briefCol;
	@FXML
	private TableColumn detCol;
	@FXML
	private TableColumn verCol;
	@FXML
	private ObservableList<AppInformation> data;
	@FXML
	private FilterFunctions functions;
	/**
	 * initialize method runs first. Data table is initialized. FilterFunctions object is created
	 * @throws Exception
	 */
	@FXML
	void initialize() throws Exception {
		functions = new FilterFunctions();
		data = FXCollections.observableList(new ArrayList());
		functions.setTopFilter();
		// Get the information about application with default sort
		List<String> list = functions.getResultsPage(1);
		for (int i = 0; i < list.size(); i++) {
			String app1 = list.get(i);
			AppInformation ap = new AppInformation("dum", "dum");
			ap.getInformation(app1);
			data.add(ap);
		}
		// Set Factories to obtain propertief of AppInformation objects
		appCol.setCellValueFactory(
	            new PropertyValueFactory<AppInformation, String>("appID"));
		comCol.setCellValueFactory(
	            new PropertyValueFactory<AppInformation, String>("developer"));
		briefCol.setCellValueFactory(
	            new PropertyValueFactory<AppInformation, String>("briefDesc"));
		detCol.setCellValueFactory(
	            new PropertyValueFactory<AppInformation, String>("detailedDesc"));
		verCol.setCellValueFactory(
	            new PropertyValueFactory<AppInformation, String>("version"));
		
		// set event handler on row double clicked. Opens a detailed view of the application
		table.setRowFactory(tv -> {
		    TableRow<AppInformation> row = new TableRow<>();
		    row.setOnMouseClicked(event -> {
		        if (! row.isEmpty() && event.getButton()==MouseButton.PRIMARY 
		             && event.getClickCount() == 2) {
		
		            AppInformation clickedRow = row.getItem();
		            AppInfo.display(clickedRow);
		        }
		    });
		    return row ;
		});
		table.setItems(data);
	}

	// 
	/**
	 * Event Listener on MenuItem[#closeMenu].onAction. Closes the application
	 * @param event
	 */
	@FXML
	public void closeApp(ActionEvent event) {
		// TODO Autogenerated
		System.exit(0);
	}

	/**
	 * Event Listener on Button[#signUp].onAction. Opens a login form and closes the current window
	 * @param event sign in button clicked
	 * @throws Exception Exception if the form cannot be opened
	 */
	@FXML
	public void login(ActionEvent event) throws Exception {
		// TODO Autogenerated
		Stage primaryStage = new Stage();
		Parent root;
		FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("Login.fxml"));
		root = (Parent) fxmlLoader.load();
		Scene scene = new Scene(root, 300, 300);
		scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		primaryStage.setScene(scene);
		primaryStage.show();
		Node source = (Node) event.getSource();
		Stage stage = (Stage) source.getScene().getWindow();
		stage.close();

	}

	/**
	 * Event Listener on MenuItem[#rating].onAction. Sorts applications by rating
	 * @param event Byrating menuItem clicked
	 * @throws Exception Exception if the form cannot be opened
	 */
	@FXML
	public void byRating(ActionEvent event) throws Exception {
		// TODO Autogenerated
		ObservableList<AppInformation> result = FXCollections.observableList(new ArrayList());
		functions.setRatingFilter();
		List<String> list = functions.getResultsPage(1);
		for (int i = 0; i < list.size(); i++) {
			String app1 = list.get(i);
			AppInformation ap = new AppInformation("1", "1");
			ap.getInformation(app1);
			result.add(ap);
		}
		table.setItems(result);
	}

	/**
	 *  Event Listener on MenuItem[#date].onAction. Sorts applications by  date created
	 * @param event Bydate menuitem clicked
	 * @throws Exception if data cannot be obtained, throws exception
	 */
	@FXML
	public void byDate(ActionEvent event) throws Exception {
		// TODO Autogenerated
		ObservableList<AppInformation> result = FXCollections.observableList(new ArrayList());
		functions.setDateFilter();
		List<String> list = functions.getResultsPage(1);
		for (int i = 0; i < list.size(); i++) {
			String app1 = list.get(i);
			AppInformation ap = new AppInformation("1", "1");
			ap.getInformation(app1);
			result.add(ap);
		}
		table.setItems(result);
	}

	/**
	 * Event Listener on Button[#searchBut].onAction. Makes a search and changes the table accordingly
	 * @param event search button clicked
	 * @throws Exception
	 */
	@FXML
	public void search(ActionEvent event) throws Exception {
		// TODO Autogenerated
		ObservableList<AppInformation> result = FXCollections.observableList(new ArrayList());
		functions.setSearch(searchBar.getText());
		List<String> list = functions.getResultsPage(1);
		for (int i = 0; i < list.size(); i++) {
			String app1 = list.get(i);
			AppInformation ap = new AppInformation("1", "1");
			ap.getInformation(app1);
			result.add(ap);
		}
		table.setItems(result);
	}
}
